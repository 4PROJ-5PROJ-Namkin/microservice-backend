version: "3.9"
services:
  backend:
    container_name: production-service-backend
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3002:3002"
    depends_on:
      - database
    volumes:
      - ./:/usr/src/app

  database:
    container_name: production-service-database
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./db-data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    healthcheck:
      test: psql -U ${POSTGRES_USER} -q -d ${POSTGRES_DB} -c "SELECT 'ready';"
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin-container
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "5050:80"
    depends_on:
      - database

  haproxy:
    container_name: production-service-load-balancer
    build:
      context: ./src/load-balancer
      dockerfile: Dockerfile
    restart: always
    ports:
      - "80:80"
      - "8888:8888"
    depends_on:
      - backend
    volumes:
      - ./src/load-balancer/haproxy_production.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "${ZOOKEEPER_PORT}:${ZOOKEEPER_PORT}"

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    ports:
      - "${KAFKA_PORT}:${KAFKA_PORT}"
    volumes:
      - ./kafka-data:/var/lib/kafka/data
    depends_on:
      - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: ${KAFKA_HOSTNAME}
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:${KAFKA_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:${KAFKA_PORT},PLAINTEXT_HOST://localhost:29092
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "${KAFKA_PORT}" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

volumes:
  db-data:
  kafka-data:
